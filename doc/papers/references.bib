% Encoding: UTF-8

@InProceedings{Strand2015,
  author = {Christian Strand and Young},
  title  = {Functional Reactive Programming on the Web A Practical Evaluation},
  year   = {2015},
  file   = {:Functional Reactive Programming on the Web, A Practical Evaluation - Christian Strand Young.pdf:PDF},
}

@InProceedings{Uustalu2005,
  author   = {Tarmo Uustalu and Varmo Vene},
  title    = {The Essence of Dataﬂow Programming},
  year     = {2005},
  abstract = {Wepropose a novel, comonadic approach to dataﬂow (stream-
based) computation. This is based on the observation that both general
and causal stream functions can be characterized as coKleisli arrows of
comonads and on the intuition that comonads in general must be a good
means to structure context-dependent computation. In particular, we de-
velop a generic comonadic interpreter of languages for context-dependent
computation and instantiate it for stream-based computation. We also
discuss distributive laws of a comonad over a monad as a means to struc-
ture combinations of eﬀectful and context-dependent computation.
We apply the latter to analyse clocked dataﬂow (partial stream based)
computation.},
  file     = {:Essence of DataFlow Programming.pdf:PDF},
}

@InProceedings{Pawlak2015,
  author = {Renaud Pawlak and renaud.pawlak@jsweet.org},
  title  = {JSweet: insights on motivations and design A transpiler from Java to JavaScript},
  year   = {2015},
  file   = {:JSweet-insights-on-motivations-and-design-Renaud-Pawlak.pdf:PDF},
}

@InProceedings{kunz1995visualizing,
  author    = {Kunz, Thomas and Taylor, David J},
  title     = {Visualizing PVM executions},
  booktitle = {Proceedings of the 3rd PVM Users' Group Meeting, Pittsburgh},
  year      = {1995},
  file      = {:visualizing-pvm-executions.pdf:PDF},
}

@InProceedings{consens1993debugging,
  author       = {Consens, Mariano and Hasan, Masum and Mendelzon, Alberto},
  title        = {Debugging distributed programs by visualizing and querying event traces},
  booktitle    = {Proceedings of the 3rd ACM/ONR Workshop on Parallel and Distributed Debugging},
  year         = {1993},
  pages        = {181--183},
  organization = {Citeseer},
  file         = {:Debugging distributed programs by visualizing and querying event traces.pdf:PDF},
}

@InProceedings{weck2016visualizing,
  author       = {Weck, Tobias and Tichy, Matthias},
  title        = {Visualizing Data-Flows in Functional Programs},
  booktitle    = {2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
  year         = {2016},
  volume       = {1},
  pages        = {293--303},
  month        = {mar},
  organization = {IEEE},
  publisher    = {Institute of Electrical \& Electronics Engineers ({IEEE})},
  doi          = {10.1109/saner.2016.82},
  file         = {:visualizing data flows in FP.pdf:PDF},
  url          = {http://dx.doi.org/10.1109/SANER.2016.82},
}

@InProceedings{Mysore2008,
  author    = {Shashidhar Mysore and Bita Mazloom and Banit Agrawal and Timothy Sherwood and Department of Computer Science and University of California and Santa Barbara},
  title     = {Understanding and Visualizing Full Systems with Data Flow Tomography},
  year      = {2008},
  volume    = {42},
  number    = {2},
  pages     = {211--221},
  publisher = {ACM},
  abstract  = {erating systems, network services, third-party libraries, helper pro-
It is not uncommon for modern systems to be composed of a variety cesses, and middleware, are all conveniently hidden behind a vari-
of interacting services, running across multiple machines in such a ety of interfaces. While this is necessary to the very idea of abstrac-
way that most developers do not really understand the whole sys- tion, the fact of the matter is that few people designing the system,
tem. As abstraction is layered atop abstraction, developers gain the and even fewer of those responsible for maintaining it, understand
ability to compose systems of extraordinary complexity with rela- how all the pieces of the puzzle fit together.
tive ease. However, many software properties, especially those that While control graphs (call graphs, control flow graphs, and the
cut across abstraction layers, become very difficult to understand like) are very useful, they are inherently tied to a single state – the
in such compositions. The communication patterns involved, the program counter. With multiple services running at the same time,
privacy of critical data, and the provenance of information, can be control flow can tell you about temporal ordering, but it is difficult
difficult to find and understand, even with access to all of the source to find true causation (e.g Packet 1 caused Packet 2 to be sent over
code. The goal of Data Flow Tomography is to use the inherent in- the network). The relationships between data-in and data-out are
formation flow of such systems to help visualize the interactions quickly lost, even in extremely simple network programs such as
between complex and interwoven components across multiple lay- the one shown in Figure 1. By visualizing the full system data
ers of abstraction. In the same way that the injection of short-lived flow, we can be certain to identify only true dependencies between
radioactive isotopes help doctors trace problems in the cardiovas- events.
cular system, the use of “data tagging” can help developers slice Our goal is to develop techniques that aid in the understand-
through the extraneous layers of software and pin-point those por- ing of complex software systems, that go beyond static code vi-
tions of the system interacting with the data of interest. To demon- sualizations, to shed light on exactly how a system is consuming,
strate the feasibility of this approach we have developed a proto- operating on, and propagating data throughout. We draw our inspi-
type system in which tags are tracked both through the machine ration from Positron Emission Tomography, in which a short-lived
and in between machines over the network, and from which novel radioactive isotope is injected into a patient and the flow of the iso-
visualizations of the whole system can be derived. We describe the tope is monitored through an ensemble of sensors. The resulting
system-level challenges in creating a working system tomography 3D image serves as a diagnostic map of the functional processes
tool and we qualitatively evaluate our system by examining several in the body. Rather than an isotope coursing through the veins of a
example real world scenarios. human, we make use of various data information-flow tags running},
  file      = {:dataflow-tomography.pdf:PDF},
  journal   = {ACM SIGOPS Operating Systems Review},
  keywords  = {Data Flow Tracking, Tomography Understanding related to the data in question},
}

@Misc{msdn_rx,
  author       = {Microsoft},
  title        = {{Reactive Extensions (Rx)}},
  howpublished = {\url{https://msdn.microsoft.com/en-us/data/gg577609.aspx}},
  year         = {2016},
  note         = {Online; Accessed September 2016},
  url          = {https://msdn.microsoft.com/en-us/data/gg577609.aspx},
}

@Misc{reactivex,
  title        = {{ReactiveX.io}},
  howpublished = {\url{http://reactivex.io/}},
  year         = {2016},
  note         = {Online; Accessed September 2016},
  url          = {http://reactivex.io/},
}

@Misc{c9_marblediagrams,
  author       = {Wes Dyer, Erik Meijer and Jeffrey van Gogh},
  title        = {{Reactive Extensions} {API} in depth: marble diagrams, select \& where},
  howpublished = {\url{https://channel9.msdn.com/blogs/j.van.gogh/reactive-extensions-api-in-depth-marble-diagrams-select--where}},
  year         = {2009},
  note         = {Online; Accessed September 2016},
  abstract     = {Wes Dyer, Erik Meijer and Jeffrey van Gogh explain a graphical method called "Marble Diagrams" that helps to reason about Rx API. 

We use these "Marble Diagrams" to describe how the Rx Select and Where operators behave.},
  timestamp    = {2009-11-19},
  url          = {https://channel9.msdn.com/blogs/j.van.gogh/reactive-extensions-api-in-depth-marble-diagrams-select--where},
}

@InProceedings{quickcheck,
  author   = {Claessen, Koen; Hughes, John},
  title    = {QuickCheck: A Lightweight Tool for Random Testing of Haskell and Programs},
  year     = {2000},
  abstract = {monad are hard to test), and so testing can be done at a
ne grain.},
  doi      = {ng},
  file     = {:quickcheck.pdf:PDF},
}

@InProceedings{bell2014phosphor,
  author       = {Bell, Jonathan and Kaiser, Gail},
  title        = {Phosphor: Illuminating Dynamic Data Flow in Commodity JVMs},
  booktitle    = {ACM SIGPLAN Notices},
  year         = {2014},
  volume       = {49},
  number       = {10},
  pages        = {83--101},
  organization = {ACM},
  abstract     = {1. Introduction
Dynamic taint analysis is a well-known information flow Dynamic taint analysis (also referred to as dynamic informa-
analysis problem with many possible applications. Taint tion flow tracking) is a powerful form of information flow
tracking allows for analysis of application data flow by analysis useful for identifying the origin of data during ex-
assigning labels to data, and then propagating those la- ecution. Inputs to an application are “tainted,” or labeled
bels through data flow. Taint tracking systems traditionally with a tag. As computations are performed, these labels are
compromise among performance, precision, soundness, and propagated through the system such that any new values de-
portability. Performance can be critical, as these systems rived from a tagged value also carry a tag derived from these
are often intended to be deployed to production environ- source input tags. In this way, we can inspect any object and
ments, and hence must have low overhead. To be deployed determine if it is derived from a tainted input by inspecting
in security-conscious settings, taint tracking must also be its label. By maintaining a precise mapping from objects to
sound and precise. Dynamic taint tracking must be portable labels, we can enable a broad range of analyses, for such
in order to be easily deployed and adopted for real world purposes as end-user privacy testing [16], fine-grained data
purposes, without requiring recompilation of the operating security [3, 10, 27, 31], detection of code-injection attacks
system or language interpreter, and without requiring access [22, 33, 35] and improved debugging [17, 25].
to application source code. Taint tracking systems typically face challenges in both},
  file         = {:oopsla2014-phosphor-preprint.pdf:PDF},
  keywords     = {Taint Tracking, Dataflow Analysis modifications to client systems (e.g. specialized operating},
}

@InProceedings{bell2015dynamic,
  author       = {Bell, Jonathan and Kaiser, Gail},
  title        = {Dynamic taint tracking for Java with phosphor},
  booktitle    = {Proceedings of the 2015 International Symposium on Software Testing and Analysis},
  year         = {2015},
  pages        = {409--413},
  organization = {ACM},
  file         = {:Dynamic Taint Tracking for Java with Phosphor (Demo).pdf:PDF},
}

@inproceedings{kiczales1997aspect,
  title={Aspect-oriented programming},
  author={Kiczales, Gregor and Lamping, John and Mendhekar, Anurag and Maeda, Chris and Lopes, Cristina and Loingtier, Jean-Marc and Irwin, John},
  booktitle={European conference on object-oriented programming},
  pages={220--242},
  year={1997},
  organization={Springer}
}

@inproceedings{kiczales2001overview,
  title={An overview of AspectJ},
  author={Kiczales, Gregor and Hilsdale, Erik and Hugunin, Jim and Kersten, Mik and Palm, Jeffrey and Griswold, William G},
  booktitle={European Conference on Object-Oriented Programming},
  pages={327--354},
  year={2001},
  organization={Springer}
}

@article{bruneton2002asm,
  title={ASM: a code manipulation tool to implement adaptable systems},
  author={Bruneton, Eric and Lenglet, Romain and Coupaye, Thierry},
  journal={Adaptable and extensible component systems},
  volume={30},
  pages={19},
  year={2002}
}

@article{kuleshov2007using,
  title={Using the ASM framework to implement common Java bytecode transformation patterns},
  author={Kuleshov, Eugene},
  journal={Aspect-Oriented Software Development},
  year={2007}
}


@book{gamma1995design,
  title={Design patterns: elements of reusable object-oriented software},
  author={Gamma, Erich},
  year={1995},
  publisher={Pearson Education India}
}

@article{johnson1995design,
  title={Design patterns: Elements of reusable object-oriented software},
  author={Johnson, Ralph and Gamma, Erich and Helm, Richard and Vlissides, John},
  journal={Boston, Massachusetts: Addison-Wesley},
  year={1995}
}

@inproceedings{quante2008dynamic,
  title={Do Dynamic Object Process Graphs Support Program Understanding?-A Controlled Experiment.},
  author={Quante, Jochen},
  booktitle={Program Comprehension, 2008. ICPC 2008. The 16th IEEE International Conference on},
  pages={73--82},
  year={2008},
  organization={IEEE}
}

@misc{berry1989real,
  title={Real time programming: special purpose or general purpose languages},
  author={Berry, G},
  year={1989},
  organization = {INRIA},
  number    = {1065}
}

@inproceedings{salvaneschi2014rescala,
  title={REScala: Bridging between object-oriented and functional style in reactive applications},
  author={Salvaneschi, Guido and Hintz, Gerold and Mezini, Mira},
  booktitle={Proceedings of the 13th international conference on Modularity},
  pages={25--36},
  year={2014},
  organization={ACM}
}

@InProceedings{salvaneschi2014empirical,
  author       = {Salvaneschi, Guido and Amann, Sven and Proksch, Sebastian and Mezini, Mira},
  title        = {An empirical study on program comprehension with reactive programming},
  booktitle    = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  year         = {2014},
  pages        = {564--575},
  organization = {ACM},
  file         = {:Salvaneschi et al. - 2014 - An Empirical Study on Program Comprehension with R.pdf:PDF},
}

@book{abelson1996structure,
  title={Structure and interpretation of computer programs},
  author={Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
  year={1996},
  publisher={Justin Kelly}
}

@techreport{maier2012deprecating,
  title={Deprecating the Observer Pattern with Scala. React},
  author={Maier, Ingo and Odersky, Martin},
  year={2012}
}

@book{zeller2009programs,
  title={Why programs fail: a guide to systematic debugging},
  author={Zeller, Andreas},
  year={2009},
  publisher={Elsevier}
}

@InProceedings{Petrillo2016,
  author       = {Petrillo, Fabio and Soh, Z{\'e}phyrin and Khomh, Foutse and Pimenta, Marcelo and Freitas, Carla and Gu{\'e}h{\'e}neuc, Yann-Ga{\"e}l},
  title        = {Understanding interactive debugging with swarm debug infrastructure},
  booktitle    = {Program Comprehension (ICPC), 2016 IEEE 24th International Conference on},
  year         = {2016},
  pages        = {1--4},
  organization = {IEEE},
  file         = {:Understanding Interactive Debugging with Swarm Debug Infrastructure.pdf:PDF},
}

@Article{Maalej2014,
  author    = {Maalej, Walid and Tiarks, Rebecca and Roehm, Tobias and Koschke, Rainer},
  title     = {On the comprehension of program comprehension},
  journal   = {ACM Transactions on Software Engineering and Methodology (TOSEM)},
  year      = {2014},
  volume    = {23},
  number    = {4},
  pages     = {31},
  file      = {:TOSEM-Maalej-Comprehension-PrePrint2.pdf:PDF},
  publisher = {ACM},
}

@Article{Spinellis2017,
  author    = {Spinellis, Diomidis},
  title     = {Effective debugging},
  year      = {2017},
  publisher = {Addison-Wesley},
  review    = {Item 32. 
If the stack trace contains only third-party routines, your 
program is probably executing through a framework that 
interacts with it via callback routines, retaining the control 
of the program flow. You probably don’t want to debug the 
framework’s code, so you need to add some breakpoints to get a 
chance to debug your own code.

Item 32 about Stack traces
  - stack navigation for library: use breakpoints in own code

Item 41 about Logging Statements: 
  - complementary, allows deeper navigation of data structures, 
  - permanent logging can be feature},
}
{gulzar2016bigdebug,
	author={Gulzar, Interlandi, Yoo},
	title={BigDebug: Debugging Primitives for Interactive Big Data Processing in Spark},
	journal={International Conference on Software Engineering International Conference on Software Engineering}
 	year={2016},
	pages={784--795},
	doi={10.1145/2884781.2884813}
}

@Article{Perscheid2016,
  author    = {Perscheid, Michael and Siegmund, Benjamin and Taeumel, Marcel and Hirschfeld, Robert},
  title     = {Studying the advancement in debugging practice of professional software developers},
  journal   = {Software Quality Journal},
  year      = {2016},
  pages     = {1--28},
  publisher = {Springer},
}

@InProceedings{Gulzar2016,
  author  = {Gulzar, Interlandi, Yoo},
  title   = {BigDebug: Debugging Primitives for Interactive Big Data Processing in Spark},
  year    = {2016},
  pages   = {784--795},
  doi     = {10.1145/2884781.2884813},
  journal = {International Conference on Software Engineering International Conference on Software Engineering},
}

@Article{benveniste1991synchronous,
  author    = {Benveniste, Albert and Berry, G{\'e}rard},
  title     = {The synchronous approach to reactive and real-time systems},
  journal   = {Proceedings of the IEEE},
  year      = {1991},
  volume    = {79},
  number    = {9},
  pages     = {1270--1282},
  publisher = {IEEE},
  url       = {https://hal-ensmp.archives-ouvertes.fr/file/index/docid/75115/filename/RR-1445.pdf},
}

@InProceedings{minelli2015know,
  author       = {Minelli, Roberto and Mocci, Andrea and Lanza, Michele},
  title        = {I know what you did last summer: an investigation of how developers spend their time},
  booktitle    = {Proceedings of the 2015 IEEE 23rd International Conference on Program Comprehension},
  year         = {2015},
  pages        = {25--35},
  organization = {IEEE Press},
  review       = {> Notes:
> - "In fact, software systems are so large and complex [3] that developers need to build links between the source code and their mental model (e.g., [4], [5], [6])."
> - "This paper .. many assumptions ... critical stance ... explicit advocatus diaboli paragraph ... threats to validity"
> - 70% of time is performing code comprehension (14% IDE UI fiddling, editing 5%, navigating 4%, 8% outside IDE)

References from Minelli:
- [6]. [Categorization of Concerns - A Categorical Program Comprehension Model](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.297.7678&rep=rep1&type=pdf), Frey, Gelhausen, Saake.  ACM, 2011.
  - investigates into categorization from the field of psychology when understanding programs. Builds a holistic model of program comprehension.
	- builds model but does not validate anything based on own emperical research.

- [5]. Robillard, Coelho, Murphy, [How Effective Developers Investigate Source Code: An Exploratory Study](http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1377187)
	- compares efficient vs inefficient developers: efficient developers first analyse, make a plan, execute the plan while inefficient developers skimm code and randomly make changes at different places

- [4]. [An Examination of Software Engineering Work Practices1](http://s3.amazonaws.com/academia.edu.documents/42992700/An_examination_of_software_engineering_w20160223-9544-y10bv1.pdf?AWSAccessKeyId=AKIAIWOWYYGZ2Y53UL3A&Expires=1494326202&Signature=KicVHAGLwCe18fD0DWLIqOza4sY%3D&response-content-disposition=inline%3B%20filename%3DAn_examination_of_software_engineering_w.pdf),  Singer, Timothy Lethbridge
	- Increasing Usability does not guarantee genuily usable software.
	- Usability research is normally out of context & use of tool is required. Does not check whether developers actually adopt the tool.
	- examines how developers spend time
	- sets up requirements for a software development tool
	- shows tool as result of their study},
}

@InProceedings{singer2010examination,
  author       = {Singer, Janice and Lethbridge, Timothy and Vinson, Norman and Anquetil, Nicolas},
  title        = {An examination of software engineering work practices},
  booktitle    = {CASCON First Decade High Impact Papers},
  year         = {2010},
  pages        = {174--188},
  organization = {IBM Corp.},
}

@Article{robillard2004effective,
  author    = {Robillard, Martin P and Coelho, Wesley and Murphy, Gail C},
  title     = {How effective developers investigate source code: An exploratory study},
  journal   = {IEEE Transactions on software engineering},
  year      = {2004},
  volume    = {30},
  number    = {12},
  pages     = {889--903},
  publisher = {IEEE},
}

@Article{gilmore1991models,
  author    = {Gilmore, David J},
  title     = {Models of debugging},
  journal   = {Acta psychologica},
  year      = {1991},
  volume    = {78},
  number    = {1},
  pages     = {151--172},
  file      = {:gilmore-models-of-debugging.pdf:PDF;:gilmore1991models - Models of debugging.pdf:PDF},
  publisher = {Elsevier},
  review    = {relation between debugging & comprehension
- many papers suggest comprehension precedes debugging

distinction between conceptual and teleological bugs, clarifies role: 
- conceptual bugs: discrepancies between actual behaviour and required behaviour (specs)
- teleological bugs: discrepancies between actual behaviour and inteded by the programmer

for programmers who didn't write the program all bugs are conceptual until comprehension is reached of the intentions of the original programmer

debugging is closing the gap between actual code and the required specificationsfd},
}

@InProceedings{petrillo2015visualizing,
  author       = {Petrillo, Fabio and Lacerda, Guilherme and Pimenta, Marcelo and Freitas, Carla},
  title        = {Visualizing interactive and shared debugging sessions},
  booktitle    = {Software Visualization (VISSOFT), 2015 IEEE 3rd Working Conference on},
  year         = {2015},
  pages        = {140--144},
  organization = {IEEE},
  file         = {:Visualizing Interactive and Shared Debugging Sessions.pdf:PDF},
}

@InProceedings{petrillo2016towards,
  author       = {Petrillo, Fabio and Soh, Z{\'e}phyrin and Khomh, Foutse and Pimenta, Marcelo and Freitas, Carla and Gu{\'e}h{\'e}neuc, Yann-Ga{\"e}l},
  title        = {Towards Understanding Interactive Debugging},
  booktitle    = {Software Quality, Reliability and Security (QRS), 2016 IEEE International Conference on},
  year         = {2016},
  pages        = {152--163},
  organization = {IEEE},
  file         = {:Towards Understanding Interactive Debugging.pdf:PDF},
  keywords     = {rank3},
  review       = {Notes:
 - Describes/defines "interactive debugging" (= stepping)
 - Reviews existing debugging practices using video recorded sessions with automated collection of debug activity (toggle breakpoints, stepping, etc).},
}

@InProceedings{srinivasan2016case,
  author       = {Srinivasan, Madhusudan and Yang, Jeong and Lee, Young},
  title        = {Case studies of optimized sequence diagram for program comprehension},
  booktitle    = {Program Comprehension (ICPC), 2016 IEEE 24th International Conference on},
  year         = {2016},
  pages        = {1--4},
  organization = {IEEE},
  file         = {:Case Studies of Optimized Sequence Diagram for Program Comprehension .pdf:PDF},
  review       = {Notes:
 - generate sequence diagrams based on dynamic tracing and static analysis},
}

@Article{tassey2002economic,
  author    = {Tassey, Gregory},
  title     = {The economic impacts of inadequate infrastructure for software testing},
  journal   = {National Institute of Standards and Technology, RTI Project},
  year      = {2002},
  volume    = {7007},
  number    = {011},
  file      = {:The Economic Impacts of Inadequate Infrastructure for Software Testing.pdf:PDF},
  publisher = {Citeseer},
}

@Article{lieberman2001will,
  author    = {Lieberman, Henry and Fry, Christopher},
  title     = {Will software ever work?},
  journal   = {Communications of the ACM},
  year      = {2001},
  volume    = {44},
  number    = {3},
  pages     = {122--124},
  file      = {:p122-lieberman.pdf:PDF},
  publisher = {ACM},
}

@Article{o1988debugging,
  author    = {O'Donnell, John T and Hall, Cordelia V},
  title     = {Debugging in applicative languages},
  journal   = {Lisp and symbolic computation},
  year      = {1988},
  volume    = {1},
  number    = {2},
  pages     = {113--145},
  file      = {:Debugging in Applicative Languages.pdf:PDF},
  publisher = {Springer},
}

@InProceedings{deering2014atlas,
  author       = {Deering, Tom and Kothari, Suresh and Sauceda, Jeremias and Mathews, Jon},
  title        = {Atlas: a new way to explore software, build analysis tools},
  booktitle    = {Companion Proceedings of the 36th International Conference on Software Engineering},
  year         = {2014},
  pages        = {588--591},
  organization = {ACM},
  file         = {:p588-deering.pdf:PDF},
}

@Article{cornelissen2009systematic,
  author    = {Cornelissen, Bas and Zaidman, Andy and Van Deursen, Arie and Moonen, Leon and Koschke, Rainer},
  title     = {A systematic survey of program comprehension through dynamic analysis},
  journal   = {IEEE Transactions on Software Engineering},
  year      = {2009},
  volume    = {35},
  number    = {5},
  pages     = {684--702},
  file      = {:Systematic Survey of Program Comprehension through Dynamic Analysis.pdf:PDF},
  keywords  = {rank5},
  publisher = {IEEE},
}

@InProceedings{lange1995program,
  author   = {Lange, Danny B and Nakamura, Yuichi and others},
  title    = {Program Explorer: A Program Visualizer for C++.},
  file     = {:lange.pdf:LaTeX},
  keywords = {rank3},
  review   = {Trace just like RxFiddle},
}

@InProceedings{cornelissen2007understanding,
  author       = {Cornelissen, Bas and Holten, Danny and Zaidman, Andy and Moonen, Leon and Van Wijk, Jarke J and Van Deursen, Arie},
  title        = {Understanding execution traces using massive sequence and circular bundle views},
  booktitle    = {Program Comprehension, 2007. ICPC'07. 15th IEEE International Conference on},
  year         = {2007},
  pages        = {49--58},
  organization = {IEEE},
  file         = {:understanding_execution_traces_icpc.pdf:PDF},
}

@Article{katz1987debugging,
  author    = {Katz, Irvin R and Anderson, John R},
  title     = {Debugging: An analysis of bug-location strategies},
  journal   = {Human-Computer Interaction},
  year      = {1987},
  volume    = {3},
  number    = {4},
  pages     = {351--399},
  file      = {:Debugging An Analysis of Bug Location Strategies.pdf:PDF},
  keywords  = {rank1},
  publisher = {L. Erlbaum Associates Inc.},
  review    = {example of researchers stating that comprehension precedes debugging},
}

@Article{beller2017behavior,
  author    = {Moritz Beller and Niels Spruit and Andy Zaidman},
  title     = {On The Dichotomy of Debugging Behavior Among Programmers},
  year      = {2017},
  file      = {:moritz debugging behavior.pdf:PDF;:moritz-beller-peerj-preprints-2743.pdf:PDF},
  publisher = {PeerJ},
}

@Book{nilsson1998declarative,
  title     = {Declarative debugging for lazy functional languages},
  publisher = {Citeseer},
  year      = {1998},
  author    = {Nilsson, Henrik},
  file      = {:declarative debugging.pdf:PDF},
}

@InProceedings{salvaneschi2016debugging,
  author       = {Salvaneschi, Guido and Mezini, Mira},
  title        = {Debugging for reactive programming},
  booktitle    = {Proceedings of the 38th International Conference on Software Engineering},
  year         = {2016},
  pages        = {796--807},
  organization = {ACM},
  file         = {:Salvaneschi, Mezini - 2016 - Debugging for Reactive Programming - ieeexplore.pdf:PDF},
  review       = {Has a chapter "Debugging Reactive Extensions":
this chapter mentions tracing as the main tool
explains Materialize / Dematerialize as a way to view the type of message (Next/Error/Complete); mentiones the overhead
explains TimeInterval / Throttle as means to limit output
explains Do as a way to add in stream logs but warns about running sequentially as part of the actual data pipeline},
}

@InProceedings{quante2007dynamic,
  author       = {Quante, Jochen and Koschke, Rainer},
  title        = {Dynamic protocol recovery},
  booktitle    = {Reverse Engineering, 2007. WCRE 2007. 14th Working Conference on},
  year         = {2007},
  pages        = {219--228},
  organization = {IEEE},
  file         = {:dynprotrec-wcre07.pdf:PDF},
  keywords     = {cornelissen,cornelissen42,online},
}

@InProceedings{fisher2007dynamic,
  author       = {Fisher II, Marc and Elbaum, Sebastian and Rothermel, Gregg},
  title        = {Dynamic characterization of web application interfaces},
  booktitle    = {International Conference on Fundamental Approaches to Software Engineering},
  year         = {2007},
  pages        = {260--275},
  organization = {Springer},
}

@InProceedings{reiss2006visualizing,
  author       = {Reiss, Steven P},
  title        = {Visualizing program execution using user abstractions},
  booktitle    = {Proceedings of the 2006 ACM symposium on Software visualization},
  year         = {2006},
  pages        = {125--134},
  organization = {ACM},
  file         = {:reiss.pdf:PDF},
  keywords     = {cornelissen,cornelissen133,online},
}

@InProceedings{malloy2005exploiting,
  author       = {Malloy, Brian A and Power, James F},
  title        = {Exploiting UML dynamic object modeling for the visualization of C++ programs},
  booktitle    = {Proceedings of the 2005 ACM symposium on Software visualization},
  year         = {2005},
  pages        = {105--114},
  organization = {ACM},
  keywords     = {cornelissen,cornelissen123,online},
}

@InProceedings{gueheneuc2004reverse,
  author       = {Gu{\'e}h{\'e}neuc, Yann-Ga{\"e}l},
  title        = {A reverse engineering tool for precise class diagrams},
  booktitle    = {Proceedings of the 2004 conference of the Centre for Advanced Studies on Collaborative research},
  year         = {2004},
  pages        = {28--41},
  organization = {IBM Press},
  keywords     = {cornelissen,cornelissen105,online},
}

@InProceedings{gueheneuc2002no,
  author       = {Gu{\'e}h{\'e}neuc, Y-G and Douence, R{\'e}mi and Jussien, Narendra},
  title        = {No Java without caffeine: A tool for dynamic analysis of Java programs},
  booktitle    = {Automated Software Engineering, 2002. Proceedings. ASE 2002. 17th IEEE International Conference on},
  year         = {2002},
  pages        = {117--126},
  organization = {IEEE},
  file         = {:java caffeine.pdf:PDF},
  keywords     = {cornelissen, cornelissen104, online, rank3},
  review       = {Interesting for the Implementation chapter: describes how Caffeine instruments Java},
}

@InProceedings{lukoit2000tracegraph,
  author    = {Lukoit, Kazimiras and Wilde, Norman and Stowell, Scott and Hennessey, Tim},
  title     = {TraceGraph: Immediate Visual Location of Software Features.},
  booktitle = {icsm},
  year      = {2000},
  pages     = {33--39},
  keywords  = {cornelissen,cornelissen122,online},
}

@InProceedings{elliott2009push,
  author       = {Elliott, Conal M},
  title        = {Push-pull functional reactive programming},
  booktitle    = {Proceedings of the 2nd ACM SIGPLAN symposium on Haskell},
  year         = {2009},
  pages        = {25--36},
  organization = {ACM},
}

@InProceedings{cooper2006embedding,
  author       = {Cooper, Gregory H and Krishnamurthi, Shriram},
  title        = {Embedding dynamic dataflow in a call-by-value language},
  booktitle    = {European Symposium on Programming},
  year         = {2006},
  pages        = {294--308},
  organization = {Springer},
}

@InProceedings{elliott1997functional,
  author       = {Elliott, Conal and Hudak, Paul},
  title        = {Functional reactive animation},
  booktitle    = {ACM SIGPLAN Notices},
  year         = {1997},
  volume       = {32},
  issue        = {8},
  pages        = {263--273},
  organization = {ACM},
}

@InProceedings{meijer2010subject,
  author    = {Meijer, E},
  title     = {Subject/Observer is dual to iterator},
  booktitle = {FIT: Fun Ideas and Thoughts at the Conference on Programming Language Design and Implementation},
  year      = {2010},
}

@Book{esposito2016reactive,
  title     = {Reactive Programming for. NET Developers},
  publisher = {Packt Publishing Ltd},
  year      = {2016},
  author    = {Esposito, Antonio and Ciceri, Michael},
}

@InProceedings{czaplicki2013asynchronous,
  author       = {Czaplicki, Evan and Chong, Stephen},
  title        = {Asynchronous functional reactive programming for GUIs},
  booktitle    = {ACM SIGPLAN Notices},
  year         = {2013},
  volume       = {48},
  issue        = {6},
  pages        = {411--422},
  organization = {ACM},
}

@Article{czaplicki2012elm,
  author  = {Czaplicki, Evan},
  title   = {Elm: Concurrent frp for functional guis},
  journal = {Senior thesis, Harvard University},
  year    = {2012},
}

@TechReport{maier2010deprecating,
  author = {Maier, Ingo and Rompf, Tiark and Odersky, Martin},
  title  = {Deprecating the observer pattern},
  year   = {2010},
}

@InProceedings{meyerovich2009flapjax,
  author       = {Meyerovich, Leo A and Guha, Arjun and Baskin, Jacob and Cooper, Gregory H and Greenberg, Michael and Bromfield, Aleks and Krishnamurthi, Shriram},
  title        = {Flapjax: a programming language for Ajax applications},
  booktitle    = {ACM SIGPLAN Notices},
  year         = {2009},
  volume       = {44},
  issue        = {10},
  pages        = {1--20},
  organization = {ACM},
}

@InProceedings{olston2011inspector,
  author       = {Olston, Christopher and Reed, Benjamin},
  title        = {Inspector gadget: A framework for custom monitoring and debugging of distributed dataflows},
  booktitle    = {Proceedings of the 2011 ACM SIGMOD International Conference on Management of data},
  year         = {2011},
  pages        = {1221--1224},
  organization = {ACM},
  file         = {:hadoop pig - inspector gadget.pdf:PDF},
}

@Article{liu2013storyflow,
  author    = {Liu, Shixia and Wu, Yingcai and Wei, Enxun and Liu, Mengchen and Liu, Yang},
  title     = {Storyflow: Tracking the evolution of stories},
  journal   = {IEEE Transactions on Visualization and Computer Graphics},
  year      = {2013},
  volume    = {19},
  number    = {12},
  pages     = {2436--2445},
  publisher = {IEEE},
}

@Article{ko2015practical,
  author    = {Ko, Andrew J and Latoza, Thomas D and Burnett, Margaret M},
  title     = {A practical guide to controlled experiments of software engineering tools with human participants},
  journal   = {Empirical Software Engineering},
  year      = {2015},
  volume    = {20},
  number    = {1},
  pages     = {110--141},
  file      = {:practical guide to controlled experiments of software engineering tools.pdf:PDF},
  keywords  = {rank5},
  publisher = {Springer},
  review    = {Guide to RxFiddle tool research!},
}

@Article{siegmund2014measuring,
  author    = {Siegmund, Janet and K{\"a}stner, Christian and Liebig, J{\"o}rg and Apel, Sven and Hanenberg, Stefan},
  title     = {Measuring and modeling programming experience},
  journal   = {Empirical Software Engineering},
  year      = {2014},
  volume    = {19},
  number    = {5},
  pages     = {1299--1334},
  file      = {:Measuring and Modeling Programming Experience.pdf:PDF},
  publisher = {Springer},
}

@InProceedings{feigenspan2012measuring,
  author       = {Feigenspan, Janet and K{\"a}stner, Christian and Liebig, J{\"o}rg and Apel, Sven and Hanenberg, Stefan},
  title        = {Measuring programming experience},
  booktitle    = {Program Comprehension (ICPC), 2012 IEEE 20th International Conference on},
  year         = {2012},
  pages        = {73--82},
  organization = {IEEE},
  file         = {:Measuring and Modeling Programming Experience.twocolumn.pdf:PDF},
}

@InProceedings{kleinschmager2011rate,
  author       = {Kleinschmager, Sebastian and Hanenberg, Stefan},
  title        = {How to rate programming skills in programming experiments?: a preliminary, exploratory, study based on university marks, pretests, and self-estimation},
  booktitle    = {Proceedings of the 3rd ACM SIGPLAN workshop on Evaluation and usability of programming languages and tools},
  year         = {2011},
  pages        = {15--24},
  organization = {ACM},
  file         = {:plateau2011-hanenberg.pdf:PDF},
}

@InProceedings{reinke2001ghood,
  author    = {Reinke, Claus},
  title     = {GHood--graphical visualisation and animation of Haskell object observations},
  booktitle = {2001 ACM SIGPLAN},
  year      = {2001},
  pages     = {121},
  file      = {:ghood.pdf:PDF},
  keywords  = {rank4},
}

@InProceedings{wallace2001multiple,
  author    = {Wallace, Malcolm and Chitil, Olaf and Brehm, Thorsten and Runciman, Colin},
  title     = {Multiple-view tracing for Haskell: a new Hat},
  booktitle = {Preliminary Proceedings of the 2001 ACM SIGPLAN Haskell Workshop, Firenze, Italy},
  year      = {2001},
  pages     = {151--170},
  file      = {:ghood.pdf:PDF},
  keywords  = {rank3},
}

@Book{rxjavabook2016,
  title = {Reactive Programming with RxJava},
  subtitle = {Creating Asynchronous, Event-Based Applications},
  author = {Nurkiewicz, Tomasz and Christensen, Ben},
  year = {2016},
  publisher = {O'Reilly Media},
  review = {https://www.safaribooksonline.com/library/view/reactive-programming-with/9781491931646/ch07.html},
}

@Book{rxswiftbook2017,
  title = {RxSwift},
  subtitle = {Learn how to use RxSwift to create complex, reactive applications on iOS.},
  author = {Pillet, Florent and Bontognali, Junior and Todorov, Marin and Gardner, Scott},
  isbn = {978-1942878346},
  publisher = {Razeware LLC},
  year = {2017},
  review = {https://store.raywenderlich.com/products/rxswift},
}

@Book{rxjavabook2015,
  title = {RxJava Essentials},
  subtitle = {Learn reactive programming to create awesome Android and Java apps},
  author = {Morgillo, Ivan},
  isbn = {9781784399108},
  publisher = {PACKT},
  year = {2017},
  review = {https://www.safaribooksonline.com/library/view/rxjava-essentials/9781784399108/}
}

@Book{introtorx,
  title = {Introduction to Rx},
  author = {Campbell, Lee},
  year = {2012},
  url = {http://www.introtorx.com},
}

@inproceedings{gallaba2015don,
  title={Don't call us, we'll call you: Characterizing callbacks in JavaScript},
  author={Gallaba, Keheliya and Mesbah, Ali and Beschastnikh, Ivan},
  booktitle={Empirical Software Engineering and Measurement (ESEM), 2015 ACM/IEEE International Symposium on},
  pages={1--10},
  year={2015},
  organization={IEEE}
}

@Article{pothier2009back,
  author    = {Pothier, Guillaume and Tanter, {\'E}ric},
  title     = {Back to the future: Omniscient debugging},
  journal   = {IEEE software},
  year      = {2009},
  volume    = {26},
  number    = {6},
  file      = {:pothier2009back - Back to the future_ Omniscient debugging.pdf:PDF},
  publisher = {IEEE},
}

@misc{rxmarbles,
  author  = {A. Medeiros},
  title   = {RxMarbles},
  date    = {2014},
  url     = {http://rxmarbles.com},
  urldate = {2016-09-10},
}

@Article{cornelissen2008execution,
  author    = {Cornelissen, Bas and Zaidman, Andy and Holten, Danny and Moonen, Leon and van Deursen, Arie and van Wijk, Jarke J},
  title     = {Execution trace analysis through massive sequence and circular bundle views},
  journal   = {Journal of Systems and Software},
  year      = {2008},
  volume    = {81},
  number    = {12},
  pages     = {2252--2268},
  publisher = {Elsevier},
}

@InProceedings{zaharia2012resilient,
  author       = {Zaharia, Matei and Chowdhury, Mosharaf and Das, Tathagata and Dave, Ankur and Ma, Justin and McCauley, Murphy and Franklin, Michael J and Shenker, Scott and Stoica, Ion},
  title        = {Resilient distributed datasets: A fault-tolerant abstraction for in-memory cluster computing},
  booktitle    = {Proceedings of the 9th USENIX conference on Networked Systems Design and Implementation},
  year         = {2012},
  pages        = {2--2},
  organization = {USENIX Association},
}

@Comment{jabref-meta: databaseType:bibtex;}
